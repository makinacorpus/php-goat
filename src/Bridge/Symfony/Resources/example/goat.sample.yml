#
# Goat various components configuration.
#
# This file explicits all existing configuration parameters, all values
# documented within this file are set to defaults.
#
goat:

    dispatcher:
        #
        # Enable the custom event dispatcher.
        #
        enabled: false

        #
        # Logging emit debug log messages on message entry and exit into and
        # from the bus, useful for debugging purpose.
        #
        with_logging: true

        #
        # Set this to true to enable concurrent processing of the same command
        # enabled.
        #
        # This will only block concurrent processing of commands implementing the
        # \Goat\Dispatcher\Message\UnparallelizableMessage interface.
        #
        with_lock: false

        #
        # Set this to plug event store on the dispatcher: every processed
        # command will be stored into the event store.
        #
        # Use this if your application does not segregate commands vs domain
        # events (CQS but not CQRS) and you wish to log every incomming command
        # and their execution status in your system.
        #
        # If event store is not enabled, this will raise errors.
        #
        with_event_store: false

        #
        # Profiling simply store command process time in milliseconds within
        # the message envelope properties.
        #
        # If you plug the event store altogether, timings will be stored in the
        # event store stored event properties as well, allowing you to analyze
        # performance restrospectively.
        #
        with_profiling: true

        #
        # Retry logic will attempt to guess if a message is suitable for retry
        # in case of failure (for example, SQL serialization errors should be
        # retried).
        #
        # It will work only on messages that are asynchronously dispatched, not
        # for synchronously processed messages, to avoid UI glitches.
        #
        # Retry logic can be customized by decorating or replacing the
        # 'goat.dispatcher.retry_strategy' service.
        #
        with_retry: true

        #
        # Enable transaction support.
        #
        # Transaction will decorate all other dispatcher decorators, hence
        # they will be all or nothing (including event store). In case of any
        # failure, everything will be rollbacked.
        #
        # Default transaction level is SERIALIZABLE (level 4), beware of the
        # potential performance impact.
        #
        with_transaction: true

    event_store:
        #
        # Enable the event store.
        #
        # By itself, this setting doesn't do anything except registering the
        # event store service into the container.
        #
        enabled: false

    lock:
        #
        # Enable the lock service.
        #
        enabled: false

    message_broker:
        #
        # Enable the message broker service.
        #
        enabled: false

    monolog:
        #
        # Registers a custom monolog  formatter that will add process PID to
        # log output lines.
        #
        log_pid: true

        #
        # Force monolog to include stack traces into logs when appliable.
        # Set this to true implies we harcode within container configuration the
        # \Monolog\Formatter\LineFormatter::includeStacktraces() method call to
        # enable exception stack trace collection.
        #
        always_log_stacktrace: false
